"use strict";(self.webpackChunkcmcs_docs=self.webpackChunkcmcs_docs||[]).push([[575],{4137:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>f});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var c=r.createContext({}),m=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=m(e.components);return r.createElement(c.Provider,{value:t},e.children)},l="mdxType",g={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,c=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),l=m(n),u=a,f=l["".concat(c,".").concat(u)]||l[u]||g[u]||i;return n?r.createElement(f,o(o({ref:t},p),{},{components:n})):r.createElement(f,o({ref:t},p))}));function f(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=u;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s[l]="string"==typeof e?e:a,o[1]=s;for(var m=2;m<i;m++)o[m]=n[m];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},5643:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>o,default:()=>g,frontMatter:()=>i,metadata:()=>s,toc:()=>m});var r=n(7462),a=(n(7294),n(4137));const i={slug:"Prompt_Engineering",title:"Prompt Engineering",authors:"cmgchess",tags:["PromptEngineering"]},o="Prompt Engineering",s={permalink:"/cmcs-docs/blog/Prompt_Engineering",editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/blog/2023-04-18.md",source:"@site/blog/2023-04-18.md",title:"Prompt Engineering",description:"The recent advances in language models have led to remarkable improvements in various NLP tasks, such as text generation, summarization, question answering, and sentiment analysis. However, even state-of-the-art language models like GPT-3 require massive amounts of training data and compute resources to achieve their impressive performance. In this context, prompt engineering is a promising approach that can significantly improve the efficiency and effectiveness of language models for specific tasks.",date:"2023-04-18T00:00:00.000Z",formattedDate:"April 18, 2023",tags:[{label:"PromptEngineering",permalink:"/cmcs-docs/blog/tags/prompt-engineering"}],readingTime:1.66,hasTruncateMarker:!0,authors:[{name:"Chathulanka Gamage",title:"Lingua maintainer",url:"https://github.com/cmgchess",imageURL:"https://avatars.githubusercontent.com/u/61736812?v=4",key:"cmgchess"}],frontMatter:{slug:"Prompt_Engineering",title:"Prompt Engineering",authors:"cmgchess",tags:["PromptEngineering"]},prevItem:{title:"Understanding Language Model Prompting",permalink:"/cmcs-docs/blog/Understanding_Language_Model_Prompting"}},c={authorsImageUrls:[void 0]},m=[],p={toc:m},l="wrapper";function g(e){let{components:t,...n}=e;return(0,a.kt)(l,(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"The recent advances in language models have led to remarkable improvements in various NLP tasks, such as text generation, summarization, question answering, and sentiment analysis. However, even state-of-the-art language models like GPT-3 require massive amounts of training data and compute resources to achieve their impressive performance. In this context, prompt engineering is a promising approach that can significantly improve the efficiency and effectiveness of language models for specific tasks."))}g.isMDXComponent=!0}}]);